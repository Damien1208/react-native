{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isSupported = isSupported;\nexports.requestReview = requestReview;\nexports.storeUrl = storeUrl;\nexports.hasAction = hasAction;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _expoConstants = _interopRequireDefault(require(\"expo-constants\"));\n\nvar _Linking = _interopRequireDefault(require(\"react-native-web/dist/exports/Linking\"));\n\nvar _Platform = _interopRequireDefault(require(\"react-native-web/dist/exports/Platform\"));\n\nvar _ExponentStoreReview = _interopRequireDefault(require(\"./ExponentStoreReview\"));\n\nfunction isSupported() {\n  return _ExponentStoreReview.default && _ExponentStoreReview.default.isSupported;\n}\n\nfunction requestReview() {\n  var url, supported;\n  return _regenerator.default.async(function requestReview$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(_ExponentStoreReview.default && _ExponentStoreReview.default.requestReview)) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.next = 3;\n          return _regenerator.default.awrap(_ExponentStoreReview.default.requestReview());\n\n        case 3:\n          _context.next = 20;\n          break;\n\n        case 5:\n          url = storeUrl();\n\n          if (!url) {\n            _context.next = 19;\n            break;\n          }\n\n          _context.next = 9;\n          return _regenerator.default.awrap(_Linking.default.canOpenURL(url));\n\n        case 9:\n          supported = _context.sent;\n\n          if (supported) {\n            _context.next = 14;\n            break;\n          }\n\n          console.log(\"Expo.StoreReview.requestReview(): Can't open store url: \", url);\n          _context.next = 17;\n          break;\n\n        case 14:\n          _context.next = 16;\n          return _regenerator.default.awrap(_Linking.default.openURL(url));\n\n        case 16:\n          return _context.abrupt(\"return\");\n\n        case 17:\n          _context.next = 20;\n          break;\n\n        case 19:\n          console.log(\"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\");\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\n\nfunction storeUrl() {\n  var manifest = _expoConstants.default.manifest;\n\n  if (_Platform.default.OS === 'ios' && manifest.ios) {\n    return manifest.ios.appStoreUrl;\n  } else if (_Platform.default.OS === 'android' && manifest.android) {\n    return manifest.android.playStoreUrl;\n  } else {\n    return null;\n  }\n}\n\nfunction hasAction() {\n  return !!storeUrl() || isSupported();\n}","map":{"version":3,"sources":["../../src/StoreReview/StoreReview.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;;;AAGA;;AAOM,SAAU,WAAV,GAAqB;AACzB,SAAO,gCAAuB,6BAAoB,WAAlD;AACD;;AAKM,SAAe,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACD,gCAAuB,6BAAoB,aAD1C;AAAA;AAAA;AAAA;;AAAA;AAAA,4CAEG,6BAAoB,aAApB,EAFH;;AAAA;AAAA;AAAA;;AAAA;AAOG,UAAA,GAPH,GAOS,QAAQ,EAPjB;;AAAA,eAQC,GARD;AAAA;AAAA;AAAA;;AAAA;AAAA,4CASuB,iBAAQ,UAAR,CAAmB,GAAnB,CATvB;;AAAA;AASK,UAAA,SATL;;AAAA,cAUI,SAVJ;AAAA;AAAA;AAAA;;AAWC,UAAA,OAAO,CAAC,GAAR,CAAY,0DAAZ,EAAwE,GAAxE;AAXD;AAAA;;AAAA;AAAA;AAAA,4CAaO,iBAAQ,OAAR,CAAgB,GAAhB,CAbP;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAkBD,UAAA,OAAO,CAAC,GAAR,CACE,oKADF;;AAlBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8BD,SAAU,QAAV,GAAkB;AAAA,MACd,QADc,GACD,sBADC,CACd,QADc;;AAEtB,MAAI,kBAAS,EAAT,KAAgB,KAAhB,IAAyB,QAAQ,CAAC,GAAtC,EAA2C;AACzC,WAAO,QAAQ,CAAC,GAAT,CAAa,WAApB;AACD,GAFD,MAEO,IAAI,kBAAS,EAAT,KAAgB,SAAhB,IAA6B,QAAQ,CAAC,OAA1C,EAAmD;AACxD,WAAO,QAAQ,CAAC,OAAT,CAAiB,YAAxB;AACD,GAFM,MAEA;AACL,WAAO,IAAP;AACD;AACF;;AAKK,SAAU,SAAV,GAAmB;AACvB,SAAO,CAAC,CAAC,QAAQ,EAAV,IAAgB,WAAW,EAAlC;AACD","sourcesContent":["import Constants from 'expo-constants';\nimport { Linking, Platform } from 'react-native';\n\nimport ExponentStoreReview from './ExponentStoreReview';\n\n/*\n * Platform must be iOS\n * iOS 10.3 or greater\n * `SKStoreReviewController` class is available\n */\nexport function isSupported(): boolean {\n  return ExponentStoreReview && ExponentStoreReview.isSupported;\n}\n\n/*\n * Use the iOS `SKStoreReviewController` API to prompt a user rating without leaving the app.\n */\nexport async function requestReview(): Promise<void> {\n  if (ExponentStoreReview && ExponentStoreReview.requestReview) {\n    await ExponentStoreReview.requestReview();\n  } else {\n    /*\n     * If StoreReview is unavailable then get the store URL from the `app.json` and open to the store.\n     */\n    const url = storeUrl();\n    if (url) {\n      const supported = await Linking.canOpenURL(url);\n      if (!supported) {\n        console.log(\"Expo.StoreReview.requestReview(): Can't open store url: \", url);\n      } else {\n        await Linking.openURL(url);\n        return; \n      }\n    } else {\n      // If the store URL is missing, let the dev know.\n      console.log(\n        \"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\"\n      );\n    }\n  }\n}\n\n/*\n * Get your app's store URLs from the `app.json`\n * iOS: https://docs.expo.io/versions/latest/workflow/configuration#appstoreurlurl-to-your-app-on-the-apple-app-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n * Android: https://docs.expo.io/versions/latest/workflow/configuration#playstoreurlurl-to-your-app-on-the-google-play-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n */\nexport function storeUrl(): string | null {\n  const { manifest } = Constants;\n  if (Platform.OS === 'ios' && manifest.ios) {\n    return manifest.ios.appStoreUrl;\n  } else if (Platform.OS === 'android' && manifest.android) {\n    return manifest.android.playStoreUrl;\n  } else {\n    return null;\n  }\n}\n\n/*\n * A flag to detect if this module can do anything\n */\nexport function hasAction(): boolean {\n  return !!storeUrl() || isSupported();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}