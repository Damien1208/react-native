{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setParams = exports.navigate = exports.init = exports.back = exports.SET_PARAMS = exports.NAVIGATE = exports.INIT = exports.BACK = void 0;\nvar BACK = 'Navigation/BACK';\nexports.BACK = BACK;\nvar INIT = 'Navigation/INIT';\nexports.INIT = INIT;\nvar NAVIGATE = 'Navigation/NAVIGATE';\nexports.NAVIGATE = NAVIGATE;\nvar SET_PARAMS = 'Navigation/SET_PARAMS';\nexports.SET_PARAMS = SET_PARAMS;\n\nvar back = function back() {\n  var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    type: BACK,\n    key: payload.key,\n    immediate: payload.immediate\n  };\n};\n\nexports.back = back;\n\nvar init = function init() {\n  var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = {\n    type: INIT\n  };\n\n  if (payload.params) {\n    action.params = payload.params;\n  }\n\n  return action;\n};\n\nexports.init = init;\n\nvar navigate = function navigate(payload) {\n  var action = {\n    type: NAVIGATE,\n    routeName: payload.routeName\n  };\n\n  if (payload.params) {\n    action.params = payload.params;\n  }\n\n  if (payload.action) {\n    action.action = payload.action;\n  }\n\n  if (payload.key) {\n    action.key = payload.key;\n  }\n\n  return action;\n};\n\nexports.navigate = navigate;\n\nvar setParams = function setParams(payload) {\n  return {\n    type: SET_PARAMS,\n    key: payload.key,\n    params: payload.params,\n    preserveFocus: true\n  };\n};\n\nexports.setParams = setParams;","map":{"version":3,"sources":["NavigationActions.ts"],"names":["BACK","INIT","NAVIGATE","SET_PARAMS","back","payload","type","key","immediate","init","action","navigate","routeName","setParams","params","preserveFocus"],"mappings":";;;;AAmDO,IAAMA,IAAI,GAAV,iBAAA;;AACA,IAAMC,IAAI,GAAV,iBAAA;;AACA,IAAMC,QAAQ,GAAd,qBAAA;;AACA,IAAMC,UAAU,GAAhB,uBAAA;;;AAGA,IAAMC,IAAI,GAAJA,SAAAA,IAAAA,GAAO;AAAA,MAClBC,OADkB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,EAAA;AAAA,SAEQ;AAC1BC,IAAAA,IAAI,EADsB,IAAA;AAE1BC,IAAAA,GAAG,EAAEF,OAAO,CAFc,GAAA;AAG1BG,IAAAA,SAAS,EAAEH,OAAO,CALA;AAEQ,GAFR;AAAb,CAAA;;;;AAQA,IAAMI,IAAI,GAAJA,SAAAA,IAAAA,GAAsD;AAA9CJ,MAAAA,OAA8C,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,EAAvCA;AACnB,MAAMK,MAA4B,GAAG;AACnCJ,IAAAA,IAAI,EADN;AAAqC,GAArC;;AAGA,MAAID,OAAO,CAAX,MAAA,EAAoB;AAClBK,IAAAA,MAAM,CAANA,MAAAA,GAAgBL,OAAO,CAAvBK,MAAAA;AAEF;;AAAA,SAAA,MAAA;AAPK,CAAA;;;;AAUA,IAAMC,QAAQ,GAARA,SAAAA,QAAAA,CAAW,OAAXA,EAEkB;AAC7B,MAAMD,MAAgC,GAAG;AACvCJ,IAAAA,IAAI,EADmC,QAAA;AAEvCM,IAAAA,SAAS,EAAEP,OAAO,CAFpB;AAAyC,GAAzC;;AAIA,MAAIA,OAAO,CAAX,MAAA,EAAoB;AAClBK,IAAAA,MAAM,CAANA,MAAAA,GAAgBL,OAAO,CAAvBK,MAAAA;AAEF;;AAAA,MAAIL,OAAO,CAAX,MAAA,EAAoB;AAClBK,IAAAA,MAAM,CAANA,MAAAA,GAAgBL,OAAO,CAAvBK,MAAAA;AAEF;;AAAA,MAAIL,OAAO,CAAX,GAAA,EAAiB;AACfK,IAAAA,MAAM,CAANA,GAAAA,GAAaL,OAAO,CAApBK,GAAAA;AAEF;;AAAA,SAAA,MAAA;AAhBK,CAAA;;;;AAmBA,IAAMG,SAAS,GAATA,SAAAA,SAAAA,CAAY,OAAZA,EAAY;AAAA,SAEQ;AAC/BP,IAAAA,IAAI,EAD2B,UAAA;AAE/BC,IAAAA,GAAG,EAAEF,OAAO,CAFmB,GAAA;AAG/BS,IAAAA,MAAM,EAAET,OAAO,CAHgB,MAAA;AAI/BU,IAAAA,aAAa,EANU;AAEQ,GAFR;AAAlB,CAAA","sourcesContent":["export interface NavigationParams {\n  [key: string]: any;\n}\n\nexport interface NavigationNavigateActionPayload {\n  routeName: string;\n  params?: NavigationParams;\n\n  // The action to run inside the sub-router\n  action?: NavigationNavigateAction;\n\n  key?: string;\n}\n\nexport interface NavigationNavigateAction\n  extends NavigationNavigateActionPayload {\n  type: 'Navigation/NAVIGATE';\n}\n\nexport interface NavigationBackActionPayload {\n  key?: string | null;\n  immediate?: boolean;\n}\n\nexport interface NavigationBackAction extends NavigationBackActionPayload {\n  type: 'Navigation/BACK';\n}\n\nexport interface NavigationInitActionPayload {\n  params?: NavigationParams;\n}\n\nexport interface NavigationInitAction extends NavigationInitActionPayload {\n  type: 'Navigation/INIT';\n}\n\nexport interface NavigationSetParamsActionPayload {\n  // The key of the route where the params should be set\n  key: string;\n\n  // The new params to merge into the existing route params\n  params?: NavigationParams;\n}\n\nexport interface NavigationSetParamsAction\n  extends NavigationSetParamsActionPayload {\n  type: 'Navigation/SET_PARAMS';\n  preserveFocus: true;\n}\n\n// Action constants\nexport const BACK = 'Navigation/BACK';\nexport const INIT = 'Navigation/INIT';\nexport const NAVIGATE = 'Navigation/NAVIGATE';\nexport const SET_PARAMS = 'Navigation/SET_PARAMS';\n\n// Action creators\nexport const back = (\n  payload: NavigationBackActionPayload = {}\n): NavigationBackAction => ({\n  type: BACK,\n  key: payload.key,\n  immediate: payload.immediate,\n});\n\nexport const init = (payload: NavigationInitActionPayload = {}) => {\n  const action: NavigationInitAction = {\n    type: INIT,\n  };\n  if (payload.params) {\n    action.params = payload.params;\n  }\n  return action;\n};\n\nexport const navigate = (\n  payload: NavigationNavigateActionPayload\n): NavigationNavigateAction => {\n  const action: NavigationNavigateAction = {\n    type: NAVIGATE,\n    routeName: payload.routeName,\n  };\n  if (payload.params) {\n    action.params = payload.params;\n  }\n  if (payload.action) {\n    action.action = payload.action;\n  }\n  if (payload.key) {\n    action.key = payload.key;\n  }\n  return action;\n};\n\nexport const setParams = (\n  payload: NavigationSetParamsActionPayload\n): NavigationSetParamsAction => ({\n  type: SET_PARAMS,\n  key: payload.key,\n  params: payload.params,\n  preserveFocus: true,\n});\n"]},"metadata":{},"sourceType":"script"}