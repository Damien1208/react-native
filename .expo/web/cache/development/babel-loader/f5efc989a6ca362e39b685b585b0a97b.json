{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _core = require(\"@unimodules/core\");\n\nvar _ScreenOrientation = require(\"./ScreenOrientation.types\");\n\nvar _ScreenOrientation2 = require(\"./ScreenOrientation\");\n\nvar _OrientationWebToAPI;\n\nvar OrientationLockAPIToWeb = {\n  DEFAULT: _ScreenOrientation.WebOrientationLock.NATURAL,\n  ALL: _ScreenOrientation.WebOrientationLock.ANY,\n  PORTRAIT: _ScreenOrientation.WebOrientationLock.PORTRAIT,\n  PORTRAIT_UP: _ScreenOrientation.WebOrientationLock.PORTRAIT_PRIMARY,\n  PORTRAIT_DOWN: _ScreenOrientation.WebOrientationLock.PORTRAIT_SECONDARY,\n  LANDSCAPE: _ScreenOrientation.WebOrientationLock.LANDSCAPE,\n  LANDSCAPE_LEFT: _ScreenOrientation.WebOrientationLock.LANDSCAPE_PRIMARY,\n  LANDSCAPE_RIGHT: _ScreenOrientation.WebOrientationLock.LANDSCAPE_SECONDARY\n};\nvar OrientationWebToAPI = (_OrientationWebToAPI = {}, (0, _defineProperty2.default)(_OrientationWebToAPI, _ScreenOrientation.WebOrientation.PORTRAIT_PRIMARY, _ScreenOrientation.Orientation.PORTRAIT_UP), (0, _defineProperty2.default)(_OrientationWebToAPI, _ScreenOrientation.WebOrientation.PORTRAIT_SECONDARY, _ScreenOrientation.Orientation.PORTRAIT_DOWN), (0, _defineProperty2.default)(_OrientationWebToAPI, _ScreenOrientation.WebOrientation.LANDSCAPE_PRIMARY, _ScreenOrientation.Orientation.LANDSCAPE_LEFT), (0, _defineProperty2.default)(_OrientationWebToAPI, _ScreenOrientation.WebOrientation.LANDSCAPE_SECONDARY, _ScreenOrientation.Orientation.LANDSCAPE_RIGHT), _OrientationWebToAPI);\nvar _window = window,\n    screen = _window.screen;\nvar orientation = screen.orientation || screen.msOrientation || null;\n\nfunction emitOrientationEvent() {\n  var _await$Promise$all, _await$Promise$all2, orientationLock, orientationInfo;\n\n  return _regenerator.default.async(function emitOrientationEvent$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regenerator.default.awrap(Promise.all([(0, _ScreenOrientation2.getOrientationLockAsync)(), (0, _ScreenOrientation2.getOrientationAsync)()]));\n\n        case 2:\n          _await$Promise$all = _context.sent;\n          _await$Promise$all2 = (0, _slicedToArray2.default)(_await$Promise$all, 2);\n          orientationLock = _await$Promise$all2[0];\n          orientationInfo = _await$Promise$all2[1];\n\n          _core.SyntheticPlatformEmitter.emit('expoDidUpdateDimensions', {\n            orientationLock: orientationLock,\n            orientationInfo: orientationInfo\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\n\nif (orientation) {\n  orientation.addEventListener('change', emitOrientationEvent);\n} else {\n  window.addEventListener('orientationchange', emitOrientationEvent);\n}\n\nfunction _convertToLegacyOrientationLock(orientationLock) {\n  switch (orientationLock) {\n    case _ScreenOrientation.WebOrientationLock.UNKNOWN:\n      throw new Error(\"expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.\");\n\n    case _ScreenOrientation.WebOrientationLock.ANY:\n      return ['portrait', 'landscape'];\n\n    case _ScreenOrientation.WebOrientationLock.NATURAL:\n      return 'default';\n\n    default:\n      return orientationLock;\n  }\n}\n\nfunction _lockAsync(webOrientationLock) {\n  var legacyLock, lockOrientation, isSuccess;\n  return _regenerator.default.async(function _lockAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(webOrientationLock === _ScreenOrientation.WebOrientationLock.UNKNOWN)) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new Error(\"expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.\");\n\n        case 2:\n          if (!(screen.orientation && screen.orientation.lock)) {\n            _context2.next = 7;\n            break;\n          }\n\n          _context2.next = 5;\n          return _regenerator.default.awrap(screen.orientation.lock(webOrientationLock));\n\n        case 5:\n          _context2.next = 16;\n          break;\n\n        case 7:\n          if (!(screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'])) {\n            _context2.next = 15;\n            break;\n          }\n\n          legacyLock = _convertToLegacyOrientationLock(webOrientationLock);\n          lockOrientation = screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'];\n          isSuccess = lockOrientation.call(screen, legacyLock);\n\n          if (isSuccess) {\n            _context2.next = 13;\n            break;\n          }\n\n          throw new Error(\"Applying orientation lock: \" + JSON.stringify(webOrientationLock) + \" to device was denied\");\n\n        case 13:\n          _context2.next = 16;\n          break;\n\n        case 15:\n          throw new Error(\"expo-screen-orientation: The browser doesn't support locking screen orientation.\");\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}\n\nvar _lastWebOrientationLock = _ScreenOrientation.WebOrientationLock.UNKNOWN;\nvar _default = {\n  get name() {\n    return 'ExpoScreenOrientation';\n  },\n\n  supportsOrientationLockAsync: function supportsOrientationLockAsync(orientationLock) {\n    return _regenerator.default.async(function supportsOrientationLockAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", orientationLock in OrientationLockAPIToWeb);\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  },\n  getPlatformOrientationLockAsync: function getPlatformOrientationLockAsync() {\n    return _regenerator.default.async(function getPlatformOrientationLockAsync$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", _lastWebOrientationLock);\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    });\n  },\n  getOrientationAsync: function getOrientationAsync() {\n    var webOrientation;\n    return _regenerator.default.async(function getOrientationAsync$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            webOrientation = screen['msOrientation'] || (screen.orientation || screen['mozOrientation'] || {}).type;\n\n            if (webOrientation) {\n              _context5.next = 3;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", {\n              orientation: _ScreenOrientation.Orientation.UNKNOWN\n            });\n\n          case 3:\n            return _context5.abrupt(\"return\", {\n              orientation: OrientationWebToAPI[webOrientation]\n            });\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    });\n  },\n  lockAsync: function lockAsync(orientationLock) {\n    var webOrientationLock;\n    return _regenerator.default.async(function lockAsync$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            webOrientationLock = OrientationLockAPIToWeb[orientationLock];\n\n            if (webOrientationLock) {\n              _context6.next = 3;\n              break;\n            }\n\n            throw new TypeError(\"Invalid Orientation Lock: \" + orientationLock);\n\n          case 3:\n            _context6.next = 5;\n            return _regenerator.default.awrap(_lockAsync(webOrientationLock));\n\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    });\n  },\n  lockPlatformAsync: function lockPlatformAsync(webOrientationLock) {\n    return _regenerator.default.async(function lockPlatformAsync$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return _regenerator.default.awrap(_lockAsync(webOrientationLock));\n\n          case 2:\n            _lastWebOrientationLock = webOrientationLock;\n\n          case 3:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    });\n  },\n  unlockAsync: function unlockAsync() {\n    var unlockOrientation, isSuccess;\n    return _regenerator.default.async(function unlockAsync$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!(screen.orientation && screen.orientation.unlock)) {\n              _context8.next = 4;\n              break;\n            }\n\n            screen.orientation.unlock();\n            _context8.next = 12;\n            break;\n\n          case 4:\n            if (!(screen['unlockOrientation'] || screen['mozUnlockOrientation'] || screen['msUnlockOrientation'])) {\n              _context8.next = 11;\n              break;\n            }\n\n            unlockOrientation = screen['unlockOrientation'] || screen['mozUnlockOrientation'] || screen['msUnlockOrientation'];\n            isSuccess = unlockOrientation.call(screen);\n\n            if (isSuccess) {\n              _context8.next = 9;\n              break;\n            }\n\n            throw new Error(\"Unlocking screen orientation on device was denied\");\n\n          case 9:\n            _context8.next = 12;\n            break;\n\n          case 11:\n            throw new Error(\"expo-screen-orientation: The browser doesn't support unlocking screen orientation.\");\n\n          case 12:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    });\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["../../src/ScreenOrientation/ExpoScreenOrientation.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { SyntheticPlatformEmitter } from '@unimodules/core';\n\nimport {\n  OrientationInfo,\n  Orientation,\n  OrientationLock,\n  WebOrientationLock,\n  WebOrientation,\n} from './ScreenOrientation.types';\n\nimport { getOrientationLockAsync, getOrientationAsync } from './ScreenOrientation';\n\nconst OrientationLockAPIToWeb: {\n  [lock: string]: WebOrientationLock;\n} = {\n  DEFAULT: WebOrientationLock.NATURAL,\n  ALL: WebOrientationLock.ANY,\n  PORTRAIT: WebOrientationLock.PORTRAIT,\n  PORTRAIT_UP: WebOrientationLock.PORTRAIT_PRIMARY,\n  PORTRAIT_DOWN: WebOrientationLock.PORTRAIT_SECONDARY,\n  LANDSCAPE: WebOrientationLock.LANDSCAPE,\n  LANDSCAPE_LEFT: WebOrientationLock.LANDSCAPE_PRIMARY,\n  LANDSCAPE_RIGHT: WebOrientationLock.LANDSCAPE_SECONDARY,\n};\n\nconst OrientationWebToAPI: {\n  [orientationWeb: string]: Orientation;\n} = {\n  [WebOrientation.PORTRAIT_PRIMARY]: Orientation.PORTRAIT_UP,\n  [WebOrientation.PORTRAIT_SECONDARY]: Orientation.PORTRAIT_DOWN,\n  [WebOrientation.LANDSCAPE_PRIMARY]: Orientation.LANDSCAPE_LEFT,\n  [WebOrientation.LANDSCAPE_SECONDARY]: Orientation.LANDSCAPE_RIGHT,\n};\n\ndeclare const window: Window;\n\nconst { screen } = window;\nconst orientation: ScreenOrientation | null =\n  screen.orientation || (screen as any).msOrientation || null;\n\nasync function emitOrientationEvent() {\n  const [orientationLock, orientationInfo] = await Promise.all([\n    getOrientationLockAsync(),\n    getOrientationAsync(),\n  ]);\n  SyntheticPlatformEmitter.emit('expoDidUpdateDimensions', {\n    orientationLock,\n    orientationInfo,\n  });\n}\n\nif (orientation) {\n  orientation.addEventListener('change', emitOrientationEvent);\n} else {\n  window.addEventListener('orientationchange', emitOrientationEvent);\n}\n\nfunction _convertToLegacyOrientationLock(orientationLock: WebOrientationLock): string | string[] {\n  switch (orientationLock) {\n    case WebOrientationLock.UNKNOWN:\n      throw new Error(\n        `expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.`\n      );\n    case WebOrientationLock.ANY:\n      return ['portrait', 'landscape'];\n    case WebOrientationLock.NATURAL:\n      return 'default';\n    default:\n      return orientationLock;\n  }\n}\n\nasync function _lockAsync(webOrientationLock: WebOrientationLock): Promise<void> {\n  if (webOrientationLock === WebOrientationLock.UNKNOWN) {\n    throw new Error(\n      `expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.`\n    );\n  }\n  if (screen.orientation && screen.orientation.lock) {\n    await screen.orientation.lock(webOrientationLock);\n  } else if (\n    screen['lockOrientation'] ||\n    screen['mozLockOrientation'] ||\n    screen['msLockOrientation']\n  ) {\n    const legacyLock = _convertToLegacyOrientationLock(webOrientationLock);\n    const lockOrientation =\n      screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'];\n    // correct `this` context must be passed in otherwise method call is disallowed by browser\n    const isSuccess = lockOrientation.call(screen, legacyLock);\n    if (!isSuccess) {\n      throw new Error(\n        `Applying orientation lock: ${JSON.stringify(webOrientationLock)} to device was denied`\n      );\n    }\n  } else {\n    throw new Error(\n      `expo-screen-orientation: The browser doesn't support locking screen orientation.`\n    );\n  }\n}\n\nlet _lastWebOrientationLock: WebOrientationLock = WebOrientationLock.UNKNOWN;\n\nexport default {\n  get name(): string {\n    return 'ExpoScreenOrientation';\n  },\n  async supportsOrientationLockAsync(orientationLock: OrientationLock): Promise<boolean> {\n    return orientationLock in OrientationLockAPIToWeb;\n  },\n  async getPlatformOrientationLockAsync(): Promise<WebOrientationLock> {\n    return _lastWebOrientationLock;\n  },\n  async getOrientationAsync(): Promise<OrientationInfo> {\n    const webOrientation =\n      screen['msOrientation'] || (screen.orientation || screen['mozOrientation'] || {}).type;\n    if (!webOrientation) {\n      return {\n        orientation: Orientation.UNKNOWN,\n      };\n    }\n    return {\n      orientation: OrientationWebToAPI[webOrientation],\n    };\n  },\n  async lockAsync(orientationLock: OrientationLock): Promise<void> {\n    const webOrientationLock = OrientationLockAPIToWeb[orientationLock];\n    if (!webOrientationLock) {\n      throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n    }\n    await _lockAsync(webOrientationLock);\n  },\n  async lockPlatformAsync(webOrientationLock: WebOrientationLock): Promise<void> {\n    await _lockAsync(webOrientationLock);\n    _lastWebOrientationLock = webOrientationLock;\n  },\n  async unlockAsync(): Promise<void> {\n    if (screen.orientation && screen.orientation.unlock) {\n      screen.orientation.unlock();\n    } else if (\n      screen['unlockOrientation'] ||\n      screen['mozUnlockOrientation'] ||\n      screen['msUnlockOrientation']\n    ) {\n      const unlockOrientation =\n        screen['unlockOrientation'] ||\n        screen['mozUnlockOrientation'] ||\n        screen['msUnlockOrientation'];\n      // correct `this` context must be passed in otherwise method call is disallowed by browser\n      const isSuccess = unlockOrientation.call(screen);\n      if (!isSuccess) {\n        throw new Error(`Unlocking screen orientation on device was denied`);\n      }\n    } else {\n      throw new Error(\n        `expo-screen-orientation: The browser doesn't support unlocking screen orientation.`\n      );\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}